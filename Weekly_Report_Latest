import requests
from bs4 import BeautifulSoup
from lxml import etree
import openpyxl
import os
# 给定爬取网址：
# ======产品1========
toProcess = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-82.html'
ProcessDealy = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-83.html'
FoundThisWeek = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-84.html'
ClosedThisWeek = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-85.html'
MainIssueNotClose = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-86.html'
VIPIssueNotClose = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-87.html'
toProcessEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-88.html'
ProcessDealyEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-89.html'
FoundThisWeekEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-90.html'
ClosedThisWeekEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-91.html'
MainIssueNotCloseEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-92.html'
VIPIssueNotCloseEXP = r'http://zentao.1.com:9494/zentao/bug-browse-7-0-bySearch-93.html'
# ======产品2========
toProcess1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-82.html'
ProcessDealy1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-83.html'
FoundThisWeek1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-84.html'
ClosedThisWeek1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-85.html'
MainIssueNotClose1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-86.html'
VIPIssueNotClose1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-87.html'
toProcessEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-88.html'
ProcessDealyEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-89.html'
FoundThisWeekEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-90.html'
ClosedThisWeekEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-91.html'
MainIssueNotCloseEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-92.html'
VIPIssueNotCloseEXP1 = r'http://zentao.1.com:9494/zentao/bug-browse-8-0-bySearch-93.html'
# 定义问题类型
issueType1 = '待处理问题'
issueType2 = '延期处理问题'
issueType3 = '本周发现问题'
issueType4 = '本周关闭问题'
issueType5 = '一般问题未关闭'
issueType6 = '严重问题未关闭'
issueType7 = '待处理问题(exp)'
issueType8 = '延期处理问题(exp)'
issueType9 = '本周发现问题(exp)'
issueType10 = '本周关闭问题(exp)'
issueType11 = '一般问题未关闭(exp)'
issueType12 = '严重问题未关闭(exp)'
# 将postman中参数格式化（变成可供可供requests.get和post引用的）的方法:用正则"^"替换开头,"$"替换结尾,在各键值对后面加上逗号以及空格
# ,以正则表达式\r\n为条件将结果替换为空即可
# 存放bug类型中文名称
bugType1 = '设计变更'
bugType2 = '新增需求'
bugType3 = '事务追踪'
bugType4 = '接口问题'
bugType5 = '业务流程'
bugType6 = '数据问题'
bugType7 = '程序错误'
bugType8 = '浏览器兼容性'
bugType9 = '页面显示'
bugType10 = '性能问题'
bugType11 = '建议类'
bugType12 = '设计缺陷'
bugType13 = '功能错误'
bugType14 = '其他'
bugType15 = '空'
# 空列表
emptyList = []
# 将变量存放到列表
issueList = [toProcess, ProcessDealy, FoundThisWeek, ClosedThisWeek, MainIssueNotClose, VIPIssueNotClose, toProcessEXP, ProcessDealyEXP, FoundThisWeekEXP, ClosedThisWeekEXP, MainIssueNotCloseEXP, VIPIssueNotCloseEXP]
issueList1 = [toProcess1, ProcessDealy1, FoundThisWeek1, ClosedThisWeek1, MainIssueNotClose1, VIPIssueNotClose1, toProcessEXP1, ProcessDealyEXP1, FoundThisWeekEXP1, ClosedThisWeekEXP1, MainIssueNotCloseEXP1, VIPIssueNotCloseEXP1]
issueTypeList = [issueType1, issueType2, issueType3, issueType4, issueType5, issueType6, issueType7, issueType8, issueType9, issueType10, issueType11, issueType12]
# 获取问题列表的指定消息头（带cookie）
headersPD1 = {"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","Accept-Encoding":"gzip, deflate","Accept-Language":"zh-CN,zh;q=0.9,en;q=0.8","Cache-Control":"max-age=0","Connection":"keep-alive","Cookie":"lang=zh-cn; theme=default; preBranch=0; bugModule=0; pagerBugBrowse=200; bugTree=show; qaBugOrder=openedDate_desc; preProductID=7; lastProduct=7; lastProject=7; zentaosid=es1vvj6qk5terji2gp29rnmsl7; device=desktop; bugBranch=0; treeBranch=0; selfClose=1; windowWidth=1536; windowHeight=722; sid=xxx","DNT":"1","Host":"zentao.1.com:9494","Referer":"http://zentao.1.com:9494/zentao/bug-browse-7.html","Upgrade-Insecure-Requests":"1","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"}
headersPD2 = {"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","Accept-Encoding":"gzip, deflate","Accept-Language":"zh-CN,zh;q=0.9,en;q=0.8","Cache-Control":"max-age=0","Connection":"keep-alive","Cookie":"lang=zh-cn; theme=default; preBranch=0; bugModule=0; zentaosid=es1vvj6qk5terji2gp29rnmsl7; device=desktop; bugBranch=0; treeBranch=0; lastBugModule=0; ajax_lastNext=on; pagerBugBrowse=200; lastProject=7; ajax_dragSelected=on; qaBugOrder=closedDate_desc; preProductID=8; lastProduct=8; selfClose=1; windowHeight=722; windowWidth=982; sid=xxx","DNT":"1","Host":"zentao.1.com:9494","Referer":"http://zentao.1.com:9494/zentao/bug-browse-8.html","Upgrade-Insecure-Requests":"1","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"}
# 获取问题类型统计的请求指定消息头
# postHeaders = {'Origin':'http://zentao.1.com:9494', 'Upgrade-Insecure-Requests':'1', 'DNT':'1', 'Content-Type':'application/x-www-form-urlencoded', 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36', 'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'}
# getHeaders = {'Host':'zentao.1.com:9494', 'Connection':'keep-alive', 'Upgrade-Insecure-Requests':'1', 'DNT':'1', 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36', 'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9', 'Referer':'http://zentao.1.com:9494/zentao/search-buildQuery.html', 'Accept-Encoding':'gzip, deflate', 'Accept-Language':'zh-CN,zh;q=0.9,en;q=0.8', 'Cookie':'lang:zh-cn; theme:default; preBranch:0; bugModule:0; pagerBugBrowse:100; preProductID:7; lastProduct:7; lastProject:7; qaBugOrder:openedDate_desc; selfClose:1; lang:zh-cn; theme:default; preBranch:0; preProjectID:7; moduleBrowseParam:0; productBrowseParam:0; projectTaskOrder:status%2Cid_desc; bugTree:show; bugModule:0; lastProject:7; pagerBugBrowse:100; preProductID:7; lastProduct:7; sid:xxx; windowWidth:1519; windowHeight:450'}
# 产品1，在issueList列表中进行遍历,统计各类型问题数
print('============产品1==============')
for i, j in zip(issueList, issueTypeList):
    # 获取页面资源
    req1 = requests.get(url=i, headers=headersKT)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # 使用xpath进行选择其中的文本（用到了/text()）
    listToProcess = ehtml.xpath('//*[@id="bugForm"]/div[3]/ul/@data-rec-total')
    # 将列表元素进行合并，拼接为字符串（列表中的所有对象进行合并，以单引号包起来）
    numToProcess = ''.join(listToProcess)
    # 遍历问题类型列表，打印结果
    print(j, ':', numToProcess)
print('======本周正式环境发现问题========')
# 获取正式环境本周发现问题列表中的内容
for i in FoundThisWeek:
    # 获取页面资源
    req1 = requests.get(url=FoundThisWeek, headers=headersKT)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if (listToProcess) == emptyList:
    print('本周正式环境没有新增问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周EXP环境发现问题========')
# 获取exp环境本周发现问题列表中的内容
for i in FoundThisWeekEXP:
    # 获取页面资源
    req1 = requests.get(url=FoundThisWeekEXP, headers=headersKT)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周EXP环境没有新增问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周正式环境关闭问题========')
# 获取正式环境本周关闭问题列表中的内容
for i in ClosedThisWeek:
    # 获取页面资源
    req1 = requests.get(url=ClosedThisWeek, headers=headersKT)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周正式环境没有关闭问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周EXP环境关闭问题========')
# 获取正式环境本周关闭问题列表中的内容
for i in ClosedThisWeekEXP:
    # 获取页面资源
    req1 = requests.get(url=ClosedThisWeekEXP, headers=headersKT)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周EXP环境没有关闭问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
# 产品2，在issueList列表中进行遍历,统计各类型问题数
print('============产品2==============')
for i, j in zip(issueList1, issueTypeList):
    # 获取页面资源
    req1 = requests.get(url=i, headers=headersSD)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # 使用xpath进行选择其中的文本（用到了/text()）
    listToProcess = ehtml.xpath('//*[@id="bugForm"]/div[3]/ul/@data-rec-total')
    # 将列表元素进行合并，拼接为字符串（列表中的所有对象进行合并，以单引号包起来）
    numToProcess = ''.join(listToProcess)
    # 遍历问题类型列表，打印结果
    print(j, ':', numToProcess)
print('======本周正式环境发现问题========')
# 获取正式环境本周发现问题列表中的内容
for i in FoundThisWeek1:
    # 获取页面资源
    req1 = requests.get(url=FoundThisWeek1, headers=headersSD)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周正式环境没有新增问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周EXP环境发现问题========')
# 获取exp环境本周发现问题列表中的内容
for i in FoundThisWeekEXP1:
    # 获取页面资源
    req1 = requests.get(url=FoundThisWeekEXP1, headers=headersSD)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周EXP环境没有新增问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周正式环境关闭问题========')
# 获取正式环境本周关闭问题列表中的内容
for i in ClosedThisWeek1:
    # 获取页面资源
    req1 = requests.get(url=ClosedThisWeek1, headers=headersSD)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周正式环境没有关闭问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
print('======本周EXP环境关闭问题========')
# 获取正式环境本周关闭问题列表中的内容
for i in ClosedThisWeekEXP1:
    # 获取页面资源
    req1 = requests.get(url=ClosedThisWeekEXP1, headers=headersSD)
    # 将页面资源设置字符集为utf-8，并转化为文本
    req1.encoding = 'utf-8'
    html = req1.text
    # beautifulsoup调用lxml解析
    bs = BeautifulSoup(html, 'lxml')
    # etree转化文本为html对象，使得可以用xpath进行元素选择
    ehtml = etree.HTML(html)
    # //*[@id="bugList"]/tbody/tr/td[5]/a/text()这个是获取问题列表中单个问题内容的xpath
    listToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[5]/a/text()')
    # //*[@id="bugList"]/tbody/tr/td[1]/a/text()这个是获取问题列表的bug编号
    bugnumToProcess = ehtml.xpath('//*[@id="bugList"]/tbody/tr/td[1]/a/text()')
    # 如果获取列表为空，则跳出for循环
    if listToProcess == emptyList:
        break
# 遍历问题类型列表，打印结果,拼接单个问题内容,':'和bug编号。判断列表是否为空也可以用emptyList = []来做空列表以判断是否相等
if listToProcess == emptyList:
    print('本周EXP环境没有关闭问题')
else:
    for i, j in zip(listToProcess, bugnumToProcess):
        print(i, ';', j)
# if (listToProcess) == emptyList:
#     print('本周EXP环境没有关闭问题')
# else:
#     for i, j in zip(listToProcess, bugnumToProcess):
#         print(i, ';', j)
# 黑科技，将控制台输出内容重定向到txt文本中
print('=======================END==========================')
os.popen(r'python C:\Users\aaa\PycharmProjects\trial\Weekly_Report.py > C:\Users\aaa\Desktop\Weekly_Report.txt')
if __name__ == '__main__':  # 如果本py文件是自己执行而不是被其他模块引用
    # 检查原始页面编码
    print('页面编码是:', requests.get(url=toProcess, headers=headersKT).encoding)
    # with open('WeeklyReport.txt', 'a') as f:
    #     f.write(result)
    # 建表并写入值
    # wb = openpyxl.Workbook()
    # curSheet = wb.create_sheet(index=0,title='curSheet')
    # actSheet = wb.active
    # actSheet['A1'] = result
    # wb.save('curSheet.xlsx')
    pass
